//
//  Response.swift
//  OAuthTwitter
//
//  Created by devonly on 2021/12/21.
//  Copyright Â© 2021 Magi, Corporation. All rights reserved.
//
//  This code was automatically generated by https://app.quicktype.io/

import Foundation

public class Response {
    public struct Search: Codable {
        public let statuses: [Response.Status]
//        let searchMetadata: Metadata
    }
    
    public struct Metadata: Codable {
        let completedIn, maxID: Double
        let maxIDStr, nextResults, query, refreshURL: String
        let count, sinceID: Int
        let sinceIDStr: String
    }
    
    public struct Status: Codable, Identifiable {
        public let createdAt: String
        public let id: Double
        public let idStr: String
        public let text: String
        public let truncated: Bool
//        public let entities: StatusEntities
//        public let metadata: Metadata
        public let source: String
        public let inReplyToStatusId: Double?
        public let inReplyToStatusIdStr: String?
        public let inReplyToUserId: Double?
        public let inReplyToUserIdStr: String?
        public let inReplyToScreenName: String?
        public let user: User
//        public let geo: JSONNull?
//        public let coordinates: JSONNull?
//        public let place: JSONNull?
//        public let contributors: JSONNull?
        public let isQuoteStatus: Bool
        public var retweetCount: Int
        public var favoriteCount: Int
        public var favorited: Bool
        public var retweeted: Bool
        public let lang: String
        public let extendedEntities: ExtendedEntity?
//        public let retweetedStatus: RetweetedStatus?
        public let possiblySensitive: Bool?
    }
    
    // MARK: - User
    public struct User: Codable, Identifiable {
        public let id: Double
        public let idStr: String
        public let name: String
        public let screenName: String
        public let location: String
        public let description: String?
//        public let userDescription: String?
        public let url: String?
        public let entities: Entity
        public let protected: Bool
        public let followersCount: Int
        public let friendsCount: Int
        public let listedCount: Int
        public let createdAt: String
        public let favouritesCount: Int
//        public let utcOffset: JSONNull?
//        public let timeZone: JSONNull?
        public let geoEnabled: Bool
        public let verified: Bool
        public let statusesCount: Int
//        public let lang: JSONNull?
        public let contributorsEnabled: Bool
        public let isTranslator: Bool
        public let isTranslationEnabled: Bool
        public let profileBackgroundColor: String
        public let profileBackgroundImageUrl: String?
        public let profileBackgroundImageUrlHttps: String?
        public let profileBackgroundTile: Bool
        public let profileImageUrl: String
        public let profileImageUrlHttps: String
        public let profileBannerUrl: String?
        public let profileLinkColor: String
        public let profileSidebarBorderColor: String
        public let profileSidebarFillColor: String
        public let profileTextColor: String
        public let profileUseBackgroundImage: Bool
        public let hasExtendedProfile: Bool
        public let defaultProfile: Bool
        public let defaultProfileImage: Bool
        public let following: Bool
        public let followRequestSent: Bool
        public let notifications: Bool
        public let translatorType: String
//        public let withheldInCountries: [JSONAny]
    }
    
    public struct Entity: Codable {
//        public let hashtags: [JSONAny]
//        public let symbols: [JSONAny]
//        public let userMentions: [UserMention]
//        public let urls: [JSONAny]
        public let media: [Media]?
    }
    
    public struct ExtendedEntity: Codable {
//        public let hashtags: [JSONAny]
//        public let symbols: [JSONAny]
//        public let userMentions: [UserMention]
//        public let urls: [JSONAny]
        public let media: [Media]
    }
    
    public struct Media: Codable, Identifiable {
        public let id: Double
        public let idStr: String
        public let indices: [Int]
        public let mediaUrl: String
        public let mediaUrlHttps: String
        public let url: String
        public let displayUrl: String
        public let expandedUrl: String
        public let type: MediaType
        public let videoInfo: VideoInfo?
//        public let sizes: Sizes
    }
    
    public struct VideoInfo: Codable {
        public let aspectRatio: [Int]
        public let variants: [Variant]
    }
    
    public enum MediaType: String, CaseIterable, Codable {
        case photo
        case video
        case gif = "animated_gif"
    }
    
    public enum ContentType: String, CaseIterable, Codable {
        case video = "video/mp4"
        case xmpeg = "application/x-mpegURL"
    }
    
    public struct Variant: Codable {
        public let bitrate: Int?
        public let contentType: ContentType
        public let url: String
    }
}
